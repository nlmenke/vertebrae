; NOTE: The actual debug.so extension is NOT SET HERE but rather (/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini)

;xdebug.remote_host = dockerhost
;;Type: string, Default value: localhost
;;Selects the host where the debug client is running, you can either use a host name or an IP address. This setting is ignored if xdebug.remote_connect_back is enabled.

xdebug.remote_connect_back = 1
;;Type: boolean, Default value: 0, Introduced in Xdebug 2.1
;;If enabled, the xdebug.remote_host setting is ignored and Xdebug will try to connect to the client that made the HTTP request. It checks the $_SERVER['REMOTE_ADDR'] variable to find out which IP address to use. Please note that there is no filter available, and anybody who can connect to the webserver will then be able to start a debugging session, even if their address does not match xdebug.remote_host.

xdebug.remote_port = 9000
;;Type: integer, Default value: 9000
;;The port to which Xdebug tries to connect on the remote host. Port 9000 is the default for both the client and the bundled debugclient. As many clients use this port number, it is best to leave this setting unchanged.

xdebug.idekey = PHPSTORM
;;Type: string, Default value: *complex*
;;Controls which IDE Key Xdebug should pass on to the DBGp debugger handler. The default is based on environment settings. First the environment setting DBGP_IDEKEY is consulted, then USER and as last USERNAME. The default is set to the first environment variable that is found. If none could be found the setting has as default ''. If this setting is set, it always overrides the environment variables.

xdebug.remote_autostart = 1
;;Type: boolean, Default value: 0
;;Normally you need to use a specific HTTP GET/POST variable to start remote debugging (see Remote Debugging). When this setting is set to 1, Xdebug will always attempt to start a remote debugging session and try to connect to a client, even if the GET/POST/COOKIE variable was not present.

xdebug.remote_enable = 1
;;Type: boolean, Default value: 0
;;This switch controls whether Xdebug should try to contact a debug client which is listening on the host and port as set with the settings xdebug.remote_host and xdebug.remote_port. If a connection can not be established the script will just continue as if this setting was 0.

xdebug.cli_color = 1
;;Type: integer, Default value: 0, Introduced in Xdebug 2.2
;;If this setting is 1, Xdebug will color var_dumps and stack traces output when in CLI mode and when the output is a tty. On Windows, the ANSICON tool needs to be installed.
;;If the setting is 2, then Xdebug will always color var_dumps and stack trace, no matter whether it's connected to a tty or whether ANSICON is installed. In this case, you might end up seeing escape codes.

xdebug.profiler_enable = 0
;;Type: integer, Default value: 0
;;Enables Xdebug's profiler which creates files in the profile output directory. Those files can be read by KCacheGrind to visualize your data. This setting can not be set in your script with ini_set(). If you want to selectively enable the profiler, please set xdebug.profiler_enable_trigger to 1 instead of using this setting.

xdebug.profiler_output_dir = "~/xdebug/phpstorm/tmp/profiling"
;;Type: string, Default value: /tmp
;;The directory where the profiler output will be written to, make sure that the user who the PHP will be running as has write permissions to that directory. This setting can not be set in your script with ini_set().

xdebug.remote_handler = dbgp
;;Type: string, Default value: dbgp
;;Can be either 'php3' which selects the old PHP 3 style debugger output, 'gdb' which enables the GDB like debugger interface or 'dbgp' - the debugger protocol. The DBGp protocol is more widely supported by clients. See more information in the introduction for Remote Debugging.
;;Note: Xdebug 2.1 and later only support 'dbgp' as protocol.

xdebug.remote_mode = req
;;Type: string, Default value: req
;;Selects when a debug connection is initiated. This setting can have two different values:
;;req Xdebug will try to connect to the debug client as soon as the script starts.
;;jit Xdebug will only try to connect to the debug client as soon as an error condition occurs.

xdebug.var_display_max_children = -1
;;Type: integer, Default value: 128
;;Controls the amount of array children and object's properties are shown when variables are displayed with either xdebug_var_dump(), xdebug.show_local_vars or through Function Traces.

xdebug.var_display_max_data = -1
;;Type: integer, Default value: 512
;;Controls the maximum string length that is shown when variables are displayed with either xdebug_var_dump(), xdebug.show_local_vars or through Function Traces.

xdebug.var_display_max_depth = -1
;;Type: integer, Default value: 3
;;Controls how many nested levels of array elements and object properties are when variables are displayed with either xdebug_var_dump(), xdebug.show_local_vars or through Function Traces.
